<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pazams Blog]]></title>
  <subtitle><![CDATA[Full Stack Web Development]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pazams.com/"/>
  <updated>2016-07-16T21:39:15.121Z</updated>
  <id>http://pazams.com/</id>
  
  <author>
    <name><![CDATA[Maor Zamski]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker recipes- modifying code inside containers]]></title>
    <link href="http://pazams.com/Docker-recipes-modifying-code/"/>
    <id>http://pazams.com/Docker-recipes-modifying-code/</id>
    <published>2016-07-16T21:45:10.000Z</published>
    <updated>2016-07-16T21:39:15.121Z</updated>
    <content type="html"><![CDATA[<p>Docker's official documentation and tutorials show us a technique to modify a project's source code inside a running container. This is done by mounting the folder from the host into the container.</p>
<a id="more"></a>
<p>In the <a href="https://docs.docker.com/engine/tutorials/dockervolumes/" target="_blank" rel="external">docker volumes tutorial</a>, the technique can be implied from:</p>
<p><code>docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</code></p>
<p>A more detailed explanation is given in the <a href="https://github.com/docker/compose/commits/master/docs/gettingstarted.md" target="_blank" rel="external">docker compose docs</a>:</p>
<blockquote>
<p>&quot;
Mounts the project directory on the host to /code inside the container allowing you to modify the code without having to rebuild the image.
&quot;</p>
</blockquote>
<p>The above explanation dates backs as early as <a href="https://github.com/docker/compose/commit/f60621ee1bbed066bb36fb3e78f7b9ed32bc3c4c#diff-1a523bd9fa0dbf998008b37579210e12" target="_blank" rel="external">Jan 2014</a>. Aside of the official docs, this technique is also discussed in <a href="https://forums.docker.com/t/best-practices-for-getting-code-into-a-container-git-clone-vs-copy-vs-data-container/4077" target="_blank" rel="external">forums</a>.  All of these references might suggest that the practice of modifying code inside containers has a justification.</p>
<h2>There is no justification for modifying code inside containers</h2>
<p>When your Dockerfile produces optimized docker images and layers, a code modification of your app or service will affect the top most layers. Essentially only the changed source gets built, while the rest of the layers are served from cache. Therefore, building a new image after modifying source code should take a few seconds (More on <a href="https://dzone.com/articles/optimizing-docker-images-for-image-size-and-build" target="_blank" rel="external">optimizing images</a>, and specifically in <a href="http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/" target="_blank" rel="external">NodeJS</a>).</p>
<p>Once your image is optimized and build time nears zero, a little investment in a <a href="/Docker-recipes-basic-ci/">basic CI flow</a> will leave no motivation for the mounting technique.</p>
<h2>But I need livereload to develop client side code</h2>
<p>Then work locally and isolated with Mock API's where needed.
No need to develop client side code inside containers in the first place.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker's official documentation and tutorials show us a technique to modify a project's source code inside a running container. This is done by mounting the folder from the host into the container.</p>]]>
    
    </summary>
    
      <category term="docker container mount modify code" scheme="http://pazams.com/tags/docker-container-mount-modify-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker recipes- basic continuous integration]]></title>
    <link href="http://pazams.com/Docker-recipes-basic-ci/"/>
    <id>http://pazams.com/Docker-recipes-basic-ci/</id>
    <published>2016-07-16T21:32:17.000Z</published>
    <updated>2016-07-16T21:39:53.593Z</updated>
    <content type="html"><![CDATA[<p>The process of building docker images should be integrated into your CI pipeline.</p>
<a id="more"></a>
<h2>The obvious approach</h2>
<p>A standard solution is to setup an automated build between your image registry and your source control.
The docker hub registry currently <a href="https://docs.docker.com/docker-hub/builds/" target="_blank" rel="external">supports</a> this with bitbucket and github.</p>
<h2>A different approach</h2>
<p>A basic solution is to run docker build with these considerations:</p>
<ol>
<li>use the local git repo HEAD's SHA as a tag.</li>
<li>ensue the tag correctly represents the repository state, done by verifying nothing is in staging area or is untracked.</li>
</ol>
<p>Combining the above into a shell script:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/usr/bin/env bash</span></span><br><span class="line">image_name=<span class="string">"foo/boo"</span></span><br><span class="line"></span><br><span class="line">[[ -z $(git status --porcelain) ]] &amp;&amp; </span><br><span class="line">docker build -t <span class="string">"<span class="variable">$&#123;image_name&#125;</span>"</span>:$(git rev-parse --verify --short HEAD) . || </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'oops looks like you need to git status and clean up'</span></span><br></pre></td></tr></table></figure>
<p>Now integrate this script with your local build tool.
For example, in NodeJS package.json:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">author</span>": <span class="value"><span class="string">"foo"</span></span>,</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"boo"</span></span>,</span><br><span class="line">  "<span class="attribute">scripts</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">publish</span>": <span class="value"><span class="string">"./publish.sh"</span></span>,</span><br><span class="line">    "<span class="attribute">build</span>": <span class="value"><span class="string">"# build"</span></span>,</span><br><span class="line">    "<span class="attribute">test</span>": <span class="value"><span class="string">"# test"</span></span>,</span><br><span class="line">    "<span class="attribute">prepublish</span>": <span class="value"><span class="string">"npm run build"</span></span>,</span><br><span class="line">    "<span class="attribute">prebuild</span>": <span class="value"><span class="string">"npm run test"</span></span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<h2>Why</h2>
<p>This method is handy if either:</p>
<ul>
<li>You want to work locally.</li>
<li>You're still figuring which image registry you want to work with.</li>
<li>You just want to test out a project with basic continuous integration before advancing to a complete solution.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The process of building docker images should be integrated into your CI pipeline.</p>]]>
    
    </summary>
    
      <category term="docker container orchestrator continuous integration ci" scheme="http://pazams.com/tags/docker-container-orchestrator-continuous-integration-ci/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cattle harakiri - A pattern for orchestrated containers]]></title>
    <link href="http://pazams.com/Cattle-harakiri-pattern/"/>
    <id>http://pazams.com/Cattle-harakiri-pattern/</id>
    <published>2016-07-14T15:00:00.000Z</published>
    <updated>2016-07-16T15:36:54.772Z</updated>
    <content type="html"><![CDATA[<p>In most cases, a service or app should take measures to keep itself running while monitoring and logging unexpected behaviors. Retrospectively inspection of logs and monitors can help identify the cause of these behaviors and fix the underlaying cause.</p>
<a id="more"></a>
<h2>TL;DR</h2>
<img src="../images/cattle-harakiri-pattern.png">
<h2>The idea</h2>
<p>With the rising use of containers and orchestrators, we can revise the way apps and services choose to maintain their running status. Health checks play an essential role in service orchestration. Detection of an unhealthy container/instance allows the orchestrator the schedule a replacement. Consider now a service is in a <em>state</em> where some execution path is constantly erroring out. While monitoring and logging is still important, a container can choose to perform &quot;harakiri&quot; and let the health check and orchestrator pick up and provision a new healthy replica. The state mentioned above differs from the state in &quot;stateless services&quot;.  The later refers to the state of interaction between the consumer and service, with 'stateless' allowing to easily balance the load across multiple instances. The 'state' type in this post refers to the inner state of service, which is unrelated to the former type.</p>
<p>Consider for example a service performs some kind of <em>init</em>, therefore it transitions from &quot;before init&quot; state to &quot;after init&quot; state. This transition could possibly hiccup (a connection setup, mount, etc.). If an instance of the service decides to perform &quot;harakiri&quot;, it would allow a new instance a chance for a clean transition where the first didn't. If ALL your services do not hold any internal state, then your stack must be entirely based on lambda serverless computing, and are way cooler than this post :)</p>
<h2>But shouldn't health check detect these sick containers?</h2>
<p>Health checks should remain simple and detect &quot;Dead&quot; containers. &quot;Dead&quot; should be based on the service type (response time, response type, etc.). &quot;Dead&quot; should not be defined on implementation details of the service as this will form tight coupling between service implementation and health check. In relation to the illustration above- a health check should not analyze whether a one legged crutching cow should be categorized as healthy or not.
Instead, a container should use it's private information, and decide when it is sick enough to pull the plug on himself.</p>
<h2>Notes</h2>
<p>Obviously, this &quot;harakiri&quot; pattern is only applicable to services that are scaled to an extent, that if a single instance decides to terminate- no adverse effect will be noticed while the orchestrator provisions a replacement.
A strategy pattern algorithm implementing the ideas above is a work in progress.
Suggestions and ideas are most welcomed.</p>
<h2>Clarifications</h2>
<ul>
<li>The idea of using animals to <a href="http://www.theregister.co.uk/2013/03/18/servers_pets_or_cattle_cern/" target="_blank" rel="external">describe services</a> is a custom in this field.</li>
<li>This post does not suggest physically challenged animals are not worthy of living, nor does it promote animal cruelty.</li>
<li>Strips were designed by me, with the help of some <a href="https://openclipart.org/" target="_blank" rel="external">clipart</a>.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>In most cases, a service or app should take measures to keep itself running while monitoring and logging unexpected behaviors. Retrospectively inspection of logs and monitors can help identify the cause of these behaviors and fix the underlaying cause.</p>]]>
    
    </summary>
    
      <category term="docker container orchestrator" scheme="http://pazams.com/tags/docker-container-orchestrator/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Github - syncing the gh-pages branch]]></title>
    <link href="http://pazams.com/Github-syncing-the-gh-pages-branch/"/>
    <id>http://pazams.com/Github-syncing-the-gh-pages-branch/</id>
    <published>2015-12-25T11:07:47.000Z</published>
    <updated>2016-07-16T14:05:50.080Z</updated>
    <content type="html"><![CDATA[<p>gh-pages branch is used with github repos as a front page for the repository. It is used to display demos, documentations, a stylized readme, and more. Some difficulties arise when the gh-pages branch needs to reference or contain files that originate from the master branch.</p>
<a id="more"></a>
<h2>Work flows</h2>
<p>Different work flow suggestions exist (see <a href="http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/" target="_blank" rel="external">here</a>, and <a href="http://oli.jp/2011/github-pages-workflow/" target="_blank" rel="external">there</a>). These suggestions work, but I find that syncing the gh-pages so it would contain the latest code from master to be a bad practice. The DRY principle should be imposed here- <strong>each file should either be on master or gh-pages branch. Not both, and not resorting to use gh-pages as the master branch.</strong></p>
<h2>A different approach</h2>
<p>Create the gh-pages as an orphan branch (also Github's recommendation):</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">--orphan gh-pages</span></span><br><span class="line">git rm -rf .</span><br></pre></td></tr></table></figure>
<h3>dealing with special files</h3>
<ol>
<li>
<p><strong>files from master that need to be referenced from gh-pages.</strong> For example- A demo page for a js client side widget. The demo should reference the distribution .js files. The easiest way the achieve this is to keep the distribution files in master, while inside gh-pages, use a 3rd party CDN to reference them such as <a href="https://rawgit.com/" target="_blank" rel="external">RawGit</a>.</p>
</li>
<li>
<p><strong>files that get generated in master branch, but belong to gh-pages.</strong> For example- documentation files that are auto generated by a tool that scans the source files. This is a bit more tricky:</p>
</li>
</ol>
<div style="margin: 0 20px;"> 
The first time the files get generated on master, there's no problem switching to the gh-pages branch, and then stage and commit them. Trying to do so in the second time gets:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: The following untracked working tree files would be overwritten by checkout:</span><br></pre></td></tr></table></figure>
<p>assuming the files are in a folder named <code>documentation</code>, the way around this is:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add documentation</span><br><span class="line">git stash</span><br><span class="line">git checkout gh-pages</span><br><span class="line">git checkout stash@&#123;<span class="number">0</span>&#125; -- documentation/</span><br></pre></td></tr></table></figure>
<p>using <code>git checkout stash@{0}</code> is preferred here over <code>git stash pop</code>, since the stash command will result in conflicts which you will need to resolve manually (note the stash command doesn't take <code>--theirs</code>).</p>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>gh-pages branch is used with github repos as a front page for the repository. It is used to display demos, documentations, a stylized readme, and more. Some difficulties arise when the gh-pages branch needs to reference or contain files that originate from the master branch.</p>]]>
    
    </summary>
    
      <category term="github gh-pages" scheme="http://pazams.com/tags/github-gh-pages/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Programming Driven Design]]></title>
    <link href="http://pazams.com/Programming-Driven-Design/"/>
    <id>http://pazams.com/Programming-Driven-Design/</id>
    <published>2015-12-21T22:19:41.000Z</published>
    <updated>2015-12-26T19:25:15.792Z</updated>
    <content type="html"><![CDATA[<p>The UI design of a new web application is usually driven by ux, product, art and other related considerations. Programming comes into play after the design is <a href="http://designmeister.com/2013/07/03/workflow-for-website-development/" target="_blank" rel="external">finished</a>. If programming considerations are taken at the UI design time, it will be limited just to verifying if a new feature is technically possible. The following example will try to demonstrate why in some applications, programming considerations should also drive the design.</p>
<a id="more"></a>
<h2>a responsive application example</h2>
<p>A design team release a responsive design for a dev team. It contains the following heading sizes:</p>
<table>
<thead>
<tr>
<th></th>
<th>Phones</th>
<th>Tablets</th>
<th>Desktops</th>
</tr>
</thead>
<tbody>
<tr>
<td>h1</td>
<td>42px</td>
<td>49px</td>
<td>70px</td>
</tr>
<tr>
<td>h2</td>
<td>18px</td>
<td>22px</td>
<td>30px</td>
</tr>
<tr>
<td>h3</td>
<td>15px</td>
<td>17.5px</td>
<td>25px</td>
</tr>
</tbody>
</table>
<p>These styles translate to the following css rules (<a href="http://codepen.io/anon/pen/RrGQGj?editors=110" target="_blank" rel="external">codepen1</a>):</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Phones */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width : <span class="number">320px</span>)</span>&#123;</span><br><span class="line">    <span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">42px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">18px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">h3</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">15px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tablets */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width : <span class="number">768px</span>)</span>&#123;</span><br><span class="line">    <span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">49px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">22px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">h3</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">17.5px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Desktops */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width : <span class="number">992px</span>)</span>&#123;</span><br><span class="line">    <span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">70px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">h3</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">25px</span></span></span>;</span><br><span class="line">    &#125;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>what if</strong> <code>h2</code> Tablet size would have dropped down 1 pixel to 21px:</p>
<table>
<thead>
<tr>
<th></th>
<th>Phones</th>
<th>Tablets</th>
<th>Desktops</th>
</tr>
</thead>
<tbody>
<tr>
<td>h1</td>
<td>42px</td>
<td>49px</td>
<td>70px</td>
</tr>
<tr>
<td>h2</td>
<td>18px</td>
<td><strong>21px</strong></td>
<td>30px</td>
</tr>
<tr>
<td>h3</td>
<td>15px</td>
<td>17.5px</td>
<td>25px</td>
</tr>
</tbody>
</table>
<p>Since now the headings relate with the same ratios between devices, the previous css rules can now be written with simple <a href="http://snook.ca/archives/html_and_css/font-size-with-rem" target="_blank" rel="external">REM</a> units (<a href="http://codepen.io/anon/pen/QyKQKY?editors=110" target="_blank" rel="external">codepen2</a>):</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Phones */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width : <span class="number">320px</span>)</span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tablets */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width : <span class="number">768px</span>)</span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">7px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Desktops */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width : <span class="number">992px</span>)</span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">7rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">3rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h3</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">2.5rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Notice that in this setup, each heading size style needs just 1 rule, in contrast to 3 rules living in different media queries. The REM version reduced the lines of code count by 27%, but this can go up to 67% as the design gets bigger, and as also REMs can be utilized everywhere (padding,margin,line-height,etc'). This change is not only about reducing lines of code, it's about clarity, ease of maintenance &amp; development time.</p>
<h2>Analysis</h2>
<p>Was it a conscious decision to have <code>h2</code> in a slightly different ratio between devices? or a result of &quot;eye-balling&quot; the sizes on different .psd files?</p>
<p>In either case, a developer commenting on a finished design with this issue will have a hard time selling there's an issue at all. The designer will not be keen to revise his art just so it would satisfy some &quot;math rules&quot;. In some way, the designer is right. However, the essence of a responsive design is broader than the design scope- one of the reasons for choosing responsive design over adaptive design is to have 1 code base. Having 1 code base where the UI is split in 3 different CSS chunks, each at their own media query, misses the original intention.</p>
<h2>Conclusion</h2>
<p>The sequential work flow of &quot;design first, develop later&quot;, has some drawbacks when building some web applications as illustrated in the example above. Developers should have a way to drive design decisions that would otherwise be looked over. This suggestion is less significant if the design team also codes, or if they <a href="http://webdesign.tutsplus.com/articles/my-thoughts-on-designing-in-the-browser-vs-designing-in-photoshop--cms-23405" target="_blank" rel="external">design in the browser</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The UI design of a new web application is usually driven by ux, product, art and other related considerations. Programming comes into play after the design is <a href="http://designmeister.com/2013/07/03/workflow-for-website-development/">finished</a>. If programming considerations are taken at the UI design time, it will be limited just to verifying if a new feature is technically possible. The following example will try to demonstrate why in some applications, programming considerations should also drive the design.</p>]]>
    
    </summary>
    
      <category term="ui css" scheme="http://pazams.com/tags/ui-css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim - how to delete (not cut)?]]></title>
    <link href="http://pazams.com/Vim-how-to-delete-not-cut/"/>
    <id>http://pazams.com/Vim-how-to-delete-not-cut/</id>
    <published>2015-12-19T23:00:23.000Z</published>
    <updated>2015-12-26T18:54:47.836Z</updated>
    <content type="html"><![CDATA[<p>vim's delete command, is a core command used in every editing session. Delete combos such as <code>dw</code>, <code>dd</code>, <code>D</code>, <code>di&quot;</code> will make you happy you chose vim. However, there's a known caveat with the delete command.</p>
<a id="more"></a>
<h2>The problem</h2>
<p>the delete command also puts the deleted content into the default register, effectively making the 'delete' command a 'cut' command. This becomes a pain when after cutting one word, you realize you also need to delete some chars with <code>x</code> or words with <code>d</code> before pasting the original first word. The other <code>x</code>'s and <code>d</code>'s will override the first word.</p>
<h2>Common solutions</h2>
<ol>
<li><strong>Always paste immediately after cutting.</strong> This will be OK if you use vim for the occasional editing in a <code>ssh</code> session. If you use vim as a primary editor, this solution won't suffice.</li>
<li><strong>Use clipboard managers plugins such as YankRing / YankStack.</strong> This helps relief the pain as you can cycle through previous register entries, but it doesn't solve the problem at it's root- the need for different commands for 'cut' and 'delete'. You should use a clipboard manager at any case for yanks. My personal preference is to use OS clipboard managers over plugins.</li>
<li><strong>Generate mappings to separate 'cut' and 'delete'.</strong> The Best solution. The related stackoverflow's question accepted <a href="http://stackoverflow.com/questions/11993851/vim-how-to-delete-not-cut" target="_blank" rel="external">answer</a> suggests a mapping which results in (assuming <code>leader</code> is set to <code>,</code>):</li>
</ol>
<div style="margin: 0 20px;"> 
<table>
<thead>
<tr>
<th>Keys</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>,d</code></td>
<td>delete</td>
</tr>
<tr>
<td><code>d</code></td>
<td>cut</td>
</tr>
</tbody>
</table>
<p>I used this mapping for some time and it does the job quite well. But since 'delete' is much more frequent than 'cut' I switched the mappings around and create <a href="https://github.com/pazams/d-is-for-delete" target="_blank" rel="external">this repo</a> which results in (assuming <code>leader</code> is set to <code>,</code>):</p>
<table>
<thead>
<tr>
<th>Keys</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>d</code></td>
<td>delete</td>
</tr>
<tr>
<td><code>,d</code></td>
<td>cut</td>
</tr>
</tbody>
</table>
<p>The mapping will also make <code>D</code>, <code>x</code>, <code>X</code> act as 'delete' rather than 'cut'.</p>
</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>vim's delete command, is a core command used in every editing session. Delete combos such as <code>dw</code>, <code>dd</code>, <code>D</code>, <code>di&quot;</code> will make you happy you chose vim. However, there's a known caveat with the delete command.</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
